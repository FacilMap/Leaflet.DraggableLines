import DraggableLinesHandler from './handler';
import './injections';
import * as icons from './markers/icons';
import DraggableLinesMarker from './markers/marker';
import DraggableLinesDragMarker from './markers/dragMarker';
import DraggableLinesTempMarker from './markers/tempMarker';
import DraggableLinesPlusMarker from './markers/plusMarker';
export * from './utils';
export * from './markers/icons';
export { DraggableLinesMarker, DraggableLinesDragMarker, DraggableLinesTempMarker, DraggableLinesPlusMarker };
export default DraggableLinesHandler;
export declare const DraggableLines: typeof DraggableLinesHandler & {
    icons: typeof icons;
    Marker: typeof DraggableLinesMarker;
    DragMarker: typeof DraggableLinesDragMarker;
    TempMarker: typeof DraggableLinesTempMarker;
    PlusMarker: typeof DraggableLinesPlusMarker;
    getInsertPosition(map: import("leaflet").Map, points: import("leaflet").LatLng[], point: import("leaflet").LatLng, isPolygon?: boolean | undefined): number;
    getInsertPosition(map: import("leaflet").Map, points: import("leaflet").LatLng[][], point: import("leaflet").LatLng, isPolygon?: boolean | undefined): [number, number];
    getInsertPosition(map: import("leaflet").Map, points: import("leaflet").LatLng[] | import("leaflet").LatLng[][], point: import("leaflet").LatLng, isPolygon?: boolean | undefined): number | [number, number];
    getRouteInsertPosition(map: import("leaflet").Map, routePoints: import("leaflet").LatLng[], trackPoints: import("leaflet").LatLng[], point: import("leaflet").LatLng): number;
    getFromPosition<T, A extends T[] | T[][]>(arr: A, idx: number | [number, number]): T;
    insertAtPosition<T_1, A_1 extends T_1[] | T_1[][]>(arr: A_1, item: T_1, idx: number | [number, number]): A_1;
    updateAtPosition<T_2, A_2 extends T_2[] | T_2[][]>(arr: A_2, item: T_2, idx: number | [number, number]): A_2;
    removeFromPosition<A_3 extends any[] | any[][]>(arr: A_3, idx: number | [number, number]): A_3;
    setPoint(layer: import("leaflet").Polyline<import("geojson").LineString | import("geojson").MultiLineString, any>, point: import("leaflet").LatLng, idx: number | [number, number], insert: boolean): void;
    removePoint(layer: import("leaflet").Polyline<import("geojson").LineString | import("geojson").MultiLineString, any>, idx: number | [number, number]): void;
    getPlusIconPoint(map: import("leaflet").Map, trackPoints: import("leaflet").LatLng[], distance: number, atStart: boolean): import("leaflet").LatLng;
};
